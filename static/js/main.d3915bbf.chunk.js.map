{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["realmApp","Realm","id","App","useState","undefined","user","setUser","benchmarks","setBenchmarks","useEffect","logIn","anonymous","then","a","catch","error","console","mongoClient","db","collection","find","all","reduce","aA","aI","pallet","filter","pfI","pA","pI","extrinsic","efI","map","x","time","actual","unit","repo","sha","slice","observed","Container","Object","keys","Row","Col","LineChart","width","height","data","Line","type","dataKey","stroke","CartesianGrid","XAxis","YAxis","Table","striped","bordered","hover","benchmark","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2UAcMA,EAAW,IAAIC,IAAU,CAAEC,GAAI,oBA2FtBC,MAzFf,WAAgB,IAAD,EACWC,wBAASC,GADpB,mBACNC,EADM,KACAC,EADA,OAEuBH,mBAAS,IAFhC,mBAENI,EAFM,KAEMC,EAFN,KAqCb,OAlCAC,qBAAU,WACRV,EAASW,MAAMV,IAAkBW,aAC9BC,KADH,uCAEI,WAAOP,GAAP,SAAAQ,EAAA,sDACEP,EAAQD,GADV,2CAFJ,uDAKGS,OAAM,SAAAC,GAAWC,QAAQD,MAAM,gBAAiBA,QAClD,IACHN,qBAAU,WACFJ,GACWA,EAAKY,YAAY,iBACdC,GAAG,iBAClBC,WAAW,SAASC,OACpBR,MAAK,SAAAS,GAAG,OAAIA,EAAIC,QAAO,SAACC,EAAIC,GAAL,mBAAC,eAElBD,GAFiB,kBAGnBC,EAAGC,OAASJ,EAAIK,QAAO,SAAAC,GAAG,OAAIA,EAAIF,SAAWD,EAAGC,UAAQH,QAAO,SAACM,EAAIC,GAAL,mBAAC,eAE1DD,GAFyD,kBAG3DC,EAAGC,UAAYT,EAAIK,QAAO,SAAAK,GAAG,OAAIA,EAAID,YAAcD,EAAGC,WAAaC,EAAIN,SAAWI,EAAGJ,UAAQO,KAAI,SAAAC,GAAC,MAAK,CACtGC,KAAMD,EAAEE,OAAOD,KACfE,KAAMH,EAAEE,OAAOC,KACfC,KAAMJ,EAAEI,KACRC,IAAKL,EAAEK,IAAIC,MAAM,EAAG,GACpBC,SAAUP,EAAEO,iBAGf,QAEJ,OACF5B,KAAKJ,KAET,CAACH,IAGF,cAACoC,EAAA,EAAD,UAEIC,OAAOC,KAAKpC,GAAYyB,KAAI,SAAAP,GAAM,OAChC,gCACE,6BAAKA,IAEHiB,OAAOC,KAAKpC,EAAWkB,IAASO,KAAI,SAAAF,GAAS,OAC3C,eAACc,EAAA,EAAD,WACE,6BAAKd,IACL,cAACe,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAWC,MAAO,IAAKC,OAAQ,IAAKC,KAAM1C,EAAWkB,GAAQK,GAA7D,UACE,cAACoB,EAAA,EAAD,CAAMC,KAAK,WAAWC,QAAQ,OAAOC,OAAO,YAC5C,cAACC,EAAA,EAAD,CAAeD,OAAO,SACtB,cAACE,EAAA,EAAD,CAAOH,QAAQ,QACf,cAACI,EAAA,EAAD,SAGJ,cAACX,EAAA,EAAD,UACE,eAACY,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACE,gCACE,+BACE,qCACA,2CAGJ,gCAEIrD,EAAWkB,GAAQK,GAAWE,KAAI,SAAA6B,GAAS,OACzC,+BACE,6BACE,mBAAGC,KAAI,6BAAwBD,EAAUxB,KAAlC,mBAAiDwB,EAAUvB,KAAlE,SACGuB,EAAUvB,QAGf,+BAAKuB,EAAU3B,KAAf,IAAsB2B,EAAUzB,UANzByB,EAAUvB,iBArBrBR,QAJNL,SC7CLsC,G,OAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrD,MAAK,YAAkD,IAA/CsD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d3915bbf.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Table from 'react-bootstrap/Table';\nimport * as Realm from 'realm-web';\nimport {\n  CartesianGrid,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis\n} from 'recharts';\n\nconst realmApp = new Realm.App({ id: 'benchmark-vrsnt' });\n\nfunction App() {\n  const [user, setUser] = useState(undefined);\n  const [benchmarks, setBenchmarks] = useState({});\n  useEffect(() => {\n    realmApp.logIn(Realm.Credentials.anonymous())\n      .then(\n        async (user) => {\n          setUser(user);\n        })\n      .catch(error => { console.error('login failure', error); });\n  }, []);\n  useEffect(() => {\n    if (!!user) {\n      const client = user.mongoClient('mongodb-atlas');\n      const db = client.db('Manta-Network');\n      db.collection('Manta').find()\n        .then(all => all.reduce((aA, aI) => (\n          {\n            ...aA,\n            [aI.pallet]: all.filter(pfI => pfI.pallet === aI.pallet).reduce((pA, pI) => (\n              {\n                ...pA,\n                [pI.extrinsic]: all.filter(efI => efI.extrinsic === pI.extrinsic && efI.pallet === pI.pallet).map(x => ({\n                  time: x.actual.time,\n                  unit: x.actual.unit,\n                  repo: x.repo,\n                  sha: x.sha.slice(0, 7),\n                  observed: x.observed, // todo: replace with commit time, when available\n                }))\n              }\n            ), {})\n          }\n        ), {}))\n        .then(setBenchmarks);\n    }\n  }, [user]);\n\n  return (\n    <Container>\n      {\n        Object.keys(benchmarks).map(pallet => (\n          <div key={pallet}>\n            <h2>{pallet}</h2>\n            {\n              Object.keys(benchmarks[pallet]).map(extrinsic => (\n                <Row key={extrinsic}>\n                  <h3>{extrinsic}</h3>\n                  <Col>\n                    <LineChart width={600} height={400} data={benchmarks[pallet][extrinsic]}>\n                      <Line type=\"monotone\" dataKey=\"time\" stroke=\"#8884d8\" />\n                      <CartesianGrid stroke=\"#ccc\" />\n                      <XAxis dataKey=\"sha\" />\n                      <YAxis />\n                    </LineChart>\n                  </Col>\n                  <Col>\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>sha</th>\n                          <th>time</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {\n                          benchmarks[pallet][extrinsic].map(benchmark => (\n                            <tr key={benchmark.sha}>\n                              <td>\n                                <a href={`https://github.com/${benchmark.repo}/commit/${benchmark.sha}`}>\n                                  {benchmark.sha}\n                                </a>\n                              </td>\n                              <td>{benchmark.time} {benchmark.unit}</td>\n                            </tr>\n                          ))\n                        }\n                      </tbody>\n                    </Table>\n                  </Col>\n                </Row>\n              ))\n            }\n          </div>\n        ))\n      }\n    </Container>\n  );\n}\n\nexport default App;\n\n//const filteredBenchmarks = benchmarks.map(x => ({ time: x.actual.time, sha: x.sha.slice(0, 7) }));\n/*\n*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}